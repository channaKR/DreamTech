// <auto-generated />
using System;
using DreamTech.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DreamTech.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DreamTech.Model.Product", b =>
                {
                    b.Property<int?>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ProductID"));

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SealerID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.ToTable("products");
                });

            modelBuilder.Entity("DreamTech.Model.Sealer", b =>
                {
                    b.Property<int>("SealerId")
                        .HasColumnType("int");

                    b.Property<string>("SealerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SealerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SealerNic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SealerId");

                    b.ToTable("sealers");
                });

            modelBuilder.Entity("DreamTech.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("SealerID")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ProductSealer", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("SealerId")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "SealerId");

                    b.HasIndex("SealerId");

                    b.ToTable("ProductSealer");
                });

            modelBuilder.Entity("DreamTech.Model.Sealer", b =>
                {
                    b.HasOne("DreamTech.Model.User", "User")
                        .WithOne("Sealer")
                        .HasForeignKey("DreamTech.Model.Sealer", "SealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductSealer", b =>
                {
                    b.HasOne("DreamTech.Model.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamTech.Model.Sealer", null)
                        .WithMany()
                        .HasForeignKey("SealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DreamTech.Model.User", b =>
                {
                    b.Navigation("Sealer");
                });
#pragma warning restore 612, 618
        }
    }
}
